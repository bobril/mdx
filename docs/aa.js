(function(t){"use strict";var e=__bbb.Mb;var r=__bbb.dd;var o=__bbb.ed;var i=__bbb.fd;var a=__bbb.gd;var n=__bbb.hd;var c=__bbb.Nb;var s=__bbb.nc;var m=__bbb.Ac;var _=__bbb.hc;var l=__bbb.ic;var h=__bbb.jc;var d=__bbb.kc;var p=__bbb.tc;var g=__bbb.uc;var u=__bbb.id;var b=__bbb.jd;var f=__bbb.ac;var y=__bbb.dc;var B=__bbb.zc;var x=__bbb.kd;var $={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4};var G=o.gitGraph;var P=e(()=>{const t=r({...G,...i().gitGraph});return t},"getConfig");var C=new a(()=>{const t=P();const e=t.mainBranchName;const r=t.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:r}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}});function T(){return n({length:7})}e(T,"getID");function A(t,e){const r=Object.create(null);return t.reduce((t,o)=>{const i=e(o);if(!r[i]){r[i]=!0;t.push(o)}return t},[])}e(A,"uniqBy");var v=e(function(t){C.records.direction=t},"setDirection");var k=e(function(t){c.debug("options str",t);t=t===null||t===void 0?void 0:t.trim();t=t||"{}";try{C.records.options=JSON.parse(t)}catch(t){c.error("error while parsing gitGraph options",t.message)}},"setOptions");var E=e(function(){return C.records.options},"getOptions");var D=e(function(t){let e=t.msg;let r=t.id;const o=t.type;let i=t.tags;c.info("commit",e,r,o,i);c.debug("Entering commit:",e,r,o,i);const a=P();r=s.sanitizeText(r,a);e=s.sanitizeText(e,a);i=i===null||i===void 0?void 0:i.map(t=>s.sanitizeText(t,a));const n={id:r?r:C.records.seq+"-"+T(),message:e,seq:C.records.seq++,type:o!==null&&o!==void 0?o:$.NORMAL,tags:i!==null&&i!==void 0?i:[],parents:C.records.head==null?[]:[C.records.head.id],branch:C.records.currBranch};C.records.head=n;c.info("main branch",a.mainBranchName);C.records.commits.has(n.id)&&c.warn(`Commit ID ${n.id} already exists`);C.records.commits.set(n.id,n);C.records.branches.set(C.records.currBranch,n.id);c.debug("in pushCommit "+n.id)},"commit");var w=e(function(t){let e=t.name;const r=t.order;e=s.sanitizeText(e,P());if(C.records.branches.has(e)){throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`)}C.records.branches.set(e,C.records.head!=null?C.records.head.id:null);C.records.branchConfig.set(e,{name:e,order:r});R(e);c.debug("in createBranch")},"branch");var I=e(t=>{let e=t.branch;let r=t.id;const o=t.type;const i=t.tags;const a=P();e=s.sanitizeText(e,a);r&&(r=s.sanitizeText(r,a));const n=C.records.branches.get(C.records.currBranch);const m=C.records.branches.get(e);const _=n?C.records.commits.get(n):void 0;const l=m?C.records.commits.get(m):void 0;if(_&&l&&_.branch===e){throw new Error(`Cannot merge branch '${e}' into itself.`)}if(C.records.currBranch===e){let t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]};throw t}if(_===void 0||!_){let t=new Error(`Incorrect usage of "merge". Current branch (${C.records.currBranch})has no commits`);t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]};throw t}if(!C.records.branches.has(e)){let t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]};throw t}if(l===void 0||!l){let t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']};throw t}if(_===l){let t=new Error('Incorrect usage of "merge". Both branches have same head');t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]};throw t}if(r&&C.records.commits.has(r)){let t=new Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom id");t.hash={text:`merge ${e} ${r} ${o} ${i===null||i===void 0?void 0:i.join(" ")}`,token:`merge ${e} ${r} ${o} ${i===null||i===void 0?void 0:i.join(" ")}`,expected:[`merge ${e} ${r}_UNIQUE ${o} ${i===null||i===void 0?void 0:i.join(" ")}`]};throw t}const h=m?m:"";const d={id:r||`${C.records.seq}-${T()}`,message:`merged branch ${e} into ${C.records.currBranch}`,seq:C.records.seq++,parents:C.records.head==null?[]:[C.records.head.id,h],branch:C.records.currBranch,type:$.MERGE,customType:o,customId:r?!0:!1,tags:i!==null&&i!==void 0?i:[]};C.records.head=d;C.records.commits.set(d.id,d);C.records.branches.set(C.records.currBranch,d.id);c.debug(C.records.branches);c.debug("in mergeBranch")},"merge");var F=e(function(t){let e=t.id;let r=t.targetId;let o=t.tags;let i=t.parent;c.debug("Entering cherryPick:",e,r,o);const a=P();e=s.sanitizeText(e,a);r=s.sanitizeText(r,a);o=o===null||o===void 0?void 0:o.map(t=>s.sanitizeText(t,a));i=s.sanitizeText(i,a);if(!e||!C.records.commits.has(e)){let t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]};throw t}const n=C.records.commits.get(e);if(n===void 0||!n){throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided')}if(i&&!(Array.isArray(n.parents)&&n.parents.includes(i))){let t=new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");throw t}const m=n.branch;if(n.type===$.MERGE&&!i){let t=new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");throw t}if(!r||!C.records.commits.has(r)){if(m===C.records.currBranch){let t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]};throw t}let t=C.records.branches.get(C.records.currBranch);if(t===void 0||!t){let t=new Error(`Incorrect usage of "cherry-pick". Current branch (${C.records.currBranch})has no commits`);t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]};throw t}let a=C.records.commits.get(t);if(a===void 0||!a){let t=new Error(`Incorrect usage of "cherry-pick". Current branch (${C.records.currBranch})has no commits`);t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]};throw t}let s={id:C.records.seq+"-"+T(),message:`cherry-picked ${n===null||n===void 0?void 0:n.message} into ${C.records.currBranch}`,seq:C.records.seq++,parents:C.records.head==null?[]:[C.records.head.id,n.id],branch:C.records.currBranch,type:$.CHERRY_PICK,tags:o?o.filter(Boolean):[`cherry-pick:${n.id}${n.type===$.MERGE?`|parent:${i}`:""}`]};C.records.head=s;C.records.commits.set(s.id,s);C.records.branches.set(C.records.currBranch,s.id);c.debug(C.records.branches);c.debug("in cherryPick")}},"cherryPick");var R=e(function(t){var e;t=s.sanitizeText(t,P());if(!C.records.branches.has(t)){let e=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);e.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]};throw e}else{C.records.currBranch=t;let r=C.records.branches.get(C.records.currBranch);if(r===void 0||!r){C.records.head=null}else{C.records.head=(e=C.records.commits.get(r))!==null&&e!==void 0?e:null}}},"checkout");function L(t,e,r){const o=t.indexOf(e);if(o===-1){t.push(r)}else{t.splice(o,1,r)}}e(L,"upsert");function Y(t){const e=t.reduce((t,e)=>{if(t.seq>e.seq){return t}return e},t[0]);let r="";t.forEach(function(t){if(t===e){r+="\t*"}else{r+="\t|"}});const o=[r,e.id,e.seq];for(const t in C.records.branches){C.records.branches.get(t)===e.id&&o.push(t)}c.debug(o.join(" "));if(e.parents&&e.parents.length==2&&e.parents[0]&&e.parents[1]){let r=C.records.commits.get(e.parents[0]);L(t,e,r);e.parents[1]&&t.push(C.records.commits.get(e.parents[1]))}else if(e.parents.length==0){return}else{if(e.parents[0]){let r=C.records.commits.get(e.parents[0]);L(t,e,r)}}t=A(t,t=>t.id);Y(t)}e(Y,"prettyPrintCommitHistory");var H=e(function(){c.debug(C.records.commits);const t=X()[0];Y([t])},"prettyPrint");var O=e(function(){C.reset();m()},"clear");var N=e(function(){const t=[...C.records.branchConfig.values()].map((t,e)=>{if(t.order!==null&&t.order!==void 0){return t}return{...t,order:parseFloat(`0.${e}`)}}).sort((t,e)=>{var r,o;return((r=t.order)!==null&&r!==void 0?r:0)-((o=e.order)!==null&&o!==void 0?o:0)}).map(({name:t})=>({name:t}));return t},"getBranchesAsObjArray");var K=e(function(){return C.records.branches},"getBranches");var J=e(function(){return C.records.commits},"getCommits");var X=e(function(){const t=[...C.records.commits.values()];t.forEach(function(t){c.debug(t.id)});t.sort((t,e)=>t.seq-e.seq);return t},"getCommitsArray");var M=e(function(){return C.records.currBranch},"getCurrentBranch");var S=e(function(){return C.records.direction},"getDirection");var U=e(function(){return C.records.head},"getHead");var Z={commitType:$,getConfig:P,setDirection:v,setOptions:k,getOptions:E,commit:D,branch:w,merge:I,cherryPick:F,checkout:R,prettyPrint:H,clear:O,getBranchesAsObjArray:N,getBranches:K,getCommits:J,getCommitsArray:X,getCurrentBranch:M,getDirection:S,getHead:U,setAccTitle:_,getAccTitle:l,getAccDescription:h,setAccDescription:d,setDiagramTitle:p,getDiagramTitle:g};var q=e((t,e)=>{u(t,e);t.dir&&e.setDirection(t.dir);for(const r of t.statements){W(r,e)}},"populate");var W=e((t,r)=>{const o={Commit:e(t=>r.commit(z(t)),"Commit"),Branch:e(t=>r.branch(j(t)),"Branch"),Merge:e(t=>r.merge(V(t)),"Merge"),Checkout:e(t=>r.checkout(Q(t)),"Checkout"),CherryPicking:e(t=>r.cherryPick(tt(t)),"CherryPicking")};const i=o[t.$type];if(i){i(t)}else{c.error(`Unknown statement type: ${t.$type}`)}},"parseStatement");var z=e(t=>{var e,r;const o={id:t.id,msg:(e=t.message)!==null&&e!==void 0?e:"",type:t.type!==void 0?$[t.type]:$.NORMAL,tags:(r=t.tags)!==null&&r!==void 0?r:void 0};return o},"parseCommit");var j=e(t=>{var e;const r={name:t.name,order:(e=t.order)!==null&&e!==void 0?e:0};return r},"parseBranch");var V=e(t=>{var e,r;const o={branch:t.branch,id:(e=t.id)!==null&&e!==void 0?e:"",type:t.type!==void 0?$[t.type]:void 0,tags:(r=t.tags)!==null&&r!==void 0?r:void 0};return o},"parseMerge");var Q=e(t=>{const e=t.branch;return e},"parseCheckout");var tt=e(t=>{var e;const r={id:t.id,targetId:"",tags:((e=t.tags)===null||e===void 0?void 0:e.length)===0?void 0:t.tags,parent:t.parent};return r},"parseCherryPicking");var et={parse:e(async t=>{const e=await b("gitGraph",t);c.debug(e);q(e,Z)},"parse")};var rt=f();var ot=rt===null||rt===void 0?void 0:rt.gitGraph;var it=10;var at=40;var nt=4;var ct=2;var st=8;var mt=new Map;var _t=new Map;var lt=30;var ht=new Map;var dt=[];var pt=0;var gt="LR";var ut=e(()=>{mt.clear();_t.clear();ht.clear();pt=0;dt=[];gt="LR"},"clear");var bt=e(t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","text");const r=typeof t==="string"?t.split(/\\n|\n|<br\s*\/?>/gi):t;r.forEach(t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve");r.setAttribute("dy","1em");r.setAttribute("x","0");r.setAttribute("class","row");r.textContent=t.trim();e.appendChild(r)});return e},"drawText");var ft=e(t=>{let r;let o;let i;if(gt==="BT"){o=e((t,e)=>t<=e,"comparisonFunc");i=Infinity}else{o=e((t,e)=>t>=e,"comparisonFunc");i=0}t.forEach(t=>{var e,a;const n=gt==="TB"||gt=="BT"?(e=_t.get(t))===null||e===void 0?void 0:e.y:(a=_t.get(t))===null||a===void 0?void 0:a.x;if(n!==void 0&&o(n,i)){r=t;i=n}});return r},"findClosestParent");var yt=e(t=>{let e="";let r=Infinity;t.forEach(t=>{const o=_t.get(t).y;if(o<=r){e=t;r=o}});return e||void 0},"findClosestParentBT");var Bt=e((t,e,r)=>{let o=r;let i=r;const a=[];t.forEach(t=>{const r=e.get(t);if(!r){throw new Error(`Commit not found for key ${t}`)}if(r.parents.length){o=$t(r);i=Math.max(o,i)}else{a.push(r)}Gt(r,o)});o=i;a.forEach(t=>{Pt(t,o,r)});t.forEach(t=>{const r=e.get(t);if(r===null||r===void 0?void 0:r.parents.length){let t=yt(r.parents);o=_t.get(t).y-at;o<=i&&(i=o);let e=mt.get(r.branch).pos,a=o-it;_t.set(r.id,{x:e,y:a})}})},"setParallelBTPos");var xt=e(t=>{var e;const r=ft(t.parents.filter(t=>t!==null));if(!r){throw new Error(`Closest parent not found for commit ${t.id}`)}const o=(e=_t.get(r))===null||e===void 0?void 0:e.y;if(o===void 0){throw new Error(`Closest parent position not found for commit ${t.id}`)}return o},"findClosestParentPos");var $t=e(t=>{const e=xt(t);return e+at},"calculateCommitPosition");var Gt=e((t,e)=>{const r=mt.get(t.branch);if(!r){throw new Error(`Branch not found for commit ${t.id}`)}const o=r.pos;const i=e+it;_t.set(t.id,{x:o,y:i});return{x:o,y:i}},"setCommitPosition");var Pt=e((t,e,r)=>{const o=mt.get(t.branch);if(!o){throw new Error(`Branch not found for commit ${t.id}`)}const i=e+r;const a=o.pos;_t.set(t.id,{x:a,y:i})},"setRootPosition");var Ct=e((t,e,r,o,i,a)=>{if(a===$.HIGHLIGHT){t.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${i%st} ${o}-outer`);t.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${i%st} ${o}-inner`)}else if(a===$.CHERRY_PICK){t.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${e.id} ${o}`);t.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${o}`);t.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${o}`);t.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${o}`);t.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${o}`)}else{let n=t.append("circle");n.attr("cx",r.x);n.attr("cy",r.y);n.attr("r",e.type===$.MERGE?9:10);n.attr("class",`commit ${e.id} commit${i%st}`);if(a===$.MERGE){let a=t.append("circle");a.attr("cx",r.x);a.attr("cy",r.y);a.attr("r",6);a.attr("class",`commit ${o} ${e.id} commit${i%st}`)}if(a===$.REVERSE){let a=t.append("path");a.attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${o} ${e.id} commit${i%st}`)}}},"drawCommitBullet");var Tt=e((t,e,r,o)=>{var i;if(e.type!==$.CHERRY_PICK&&(e.customId&&e.type===$.MERGE||e.type!==$.MERGE)&&(ot===null||ot===void 0?void 0:ot.showCommitLabel)){let a=t.append("g"),n=a.insert("rect").attr("class","commit-label-bkg"),c=a.append("text").attr("x",o).attr("y",r.y+25).attr("class","commit-label").text(e.id),s=(i=c.node())===null||i===void 0?void 0:i.getBBox();if(s){n.attr("x",r.posWithOffset-s.width/2-ct).attr("y",r.y+13.5).attr("width",s.width+2*ct).attr("height",s.height+2*ct);if(gt==="TB"||gt==="BT"){n.attr("x",r.x-(s.width+4*nt+5)).attr("y",r.y-12);c.attr("x",r.x-(s.width+4*nt)).attr("y",r.y+s.height-12)}else{c.attr("x",r.posWithOffset-s.width/2)}if(ot.rotateCommitLabel){if(gt==="TB"||gt==="BT"){c.attr("transform","rotate(-45, "+r.x+", "+r.y+")");n.attr("transform","rotate(-45, "+r.x+", "+r.y+")")}else{let t=-7.5-(s.width+10)/25*9.5,e=10+s.width/25*8.5;a.attr("transform","translate("+t+", "+e+") rotate(-45, "+o+", "+r.y+")")}}}}},"drawCommitLabel");var At=e((t,e,r,o)=>{var i;if(e.tags.length>0){let a=0,n=0,c=0,s=[];for(const o of e.tags.reverse()){let e=t.insert("polygon"),m=t.append("circle"),_=t.append("text").attr("y",r.y-16-a).attr("class","tag-label").text(o),l=(i=_.node())===null||i===void 0?void 0:i.getBBox();if(!l){throw new Error("Tag bbox not found")}n=Math.max(n,l.width);c=Math.max(c,l.height);_.attr("x",r.posWithOffset-l.width/2);s.push({tag:_,hole:m,rect:e,yOffset:a});a+=20}for(const{tag:t,hole:e,rect:i,yOffset:a}of s){let s=c/2,m=r.y-19.2-a;i.attr("class","tag-label-bkg").attr("points",`\n      ${o-n/2-nt/2},${m+ct}  \n      ${o-n/2-nt/2},${m-ct}\n      ${r.posWithOffset-n/2-nt},${m-s-ct}\n      ${r.posWithOffset+n/2+nt},${m-s-ct}\n      ${r.posWithOffset+n/2+nt},${m+s+ct}\n      ${r.posWithOffset-n/2-nt},${m+s+ct}`);e.attr("cy",m).attr("cx",o-n/2+nt/2).attr("r",1.5).attr("class","tag-hole");if(gt==="TB"||gt==="BT"){let c=o+a;i.attr("class","tag-label-bkg").attr("points",`\n        ${r.x},${c+2}\n        ${r.x},${c-2}\n        ${r.x+it},${c-s-2}\n        ${r.x+it+n+4},${c-s-2}\n        ${r.x+it+n+4},${c+s+2}\n        ${r.x+it},${c+s+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+o+")");e.attr("cx",r.x+nt/2).attr("cy",c).attr("transform","translate(12,12) rotate(45, "+r.x+","+o+")");t.attr("x",r.x+5).attr("y",c+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+o+")")}}}},"drawCommitTags");var vt=e(t=>{var e;const r=(e=t.customType)!==null&&e!==void 0?e:t.type;switch(r){case $.NORMAL:return"commit-normal";case $.REVERSE:return"commit-reverse";case $.HIGHLIGHT:return"commit-highlight";case $.MERGE:return"commit-merge";case $.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType");var kt=e((t,e,r,o)=>{var i,a,n;const c={x:0,y:0};if(t.parents.length>0){let r=ft(t.parents);if(r){let n=(i=o.get(r))!==null&&i!==void 0?i:c;if(e==="TB"){return n.y+at}else if(e==="BT"){let e=(a=o.get(t.id))!==null&&a!==void 0?a:c;return e.y-at}else{return n.x+at}}}else{if(e==="TB"){return lt}else if(e==="BT"){let e=(n=o.get(t.id))!==null&&n!==void 0?n:c;return e.y-at}else{return 0}}return 0},"calculatePosition");var Et=e((t,e,r)=>{var o,i;const a=gt==="BT"&&r?e:e+it;const n=gt==="TB"||gt==="BT"?a:(o=mt.get(t.branch))===null||o===void 0?void 0:o.pos;const c=gt==="TB"||gt==="BT"?(i=mt.get(t.branch))===null||i===void 0?void 0:i.pos:a;if(c===void 0||n===void 0){throw new Error(`Position were undefined for commit ${t.id}`)}return{x:c,y:n,posWithOffset:a}},"getCommitPosition");var Dt=e((t,r,o)=>{var i;if(!ot){throw new Error("GitGraph config not found")}const a=t.append("g").attr("class","commit-bullets");const n=t.append("g").attr("class","commit-labels");let c=gt==="TB"||gt==="BT"?lt:0;const s=[...r.keys()];const m=(i=ot===null||ot===void 0?void 0:ot.parallelCommits)!==null&&i!==void 0?i:!1;const _=e((t,e)=>{var o,i;const a=(o=r.get(t))===null||o===void 0?void 0:o.seq;const n=(i=r.get(e))===null||i===void 0?void 0:i.seq;return a!==void 0&&n!==void 0?a-n:0},"sortKeys");let l=s.sort(_);if(gt==="BT"){m&&Bt(l,r,c);l=l.reverse()}l.forEach(t=>{var e,i,s;const _=r.get(t);if(!_){throw new Error(`Commit not found for key ${t}`)}m&&(c=kt(_,gt,c,_t));const l=Et(_,c,m);if(o){let t=vt(_),r=(e=_.customType)!==null&&e!==void 0?e:_.type,o=(s=(i=mt.get(_.branch))===null||i===void 0?void 0:i.index)!==null&&s!==void 0?s:0;Ct(a,_,l,t,o,r);Tt(n,_,l,c);At(n,_,l,c)}if(gt==="TB"||gt==="BT"){_t.set(_.id,{x:l.x,y:l.posWithOffset})}else{_t.set(_.id,{x:l.posWithOffset,y:l.y})}c=gt==="BT"&&m?c+at:c+at+it;c>pt&&(pt=c)})},"drawCommits");var wt=e((t,r,o,i,a)=>{const n=gt==="TB"||gt==="BT"?o.x<i.x:o.y<i.y;const c=n?r.branch:t.branch;const s=e(t=>t.branch===c,"isOnBranchToGetCurve");const m=e(e=>e.seq>t.seq&&e.seq<r.seq,"isBetweenCommits");return[...a.values()].some(t=>m(t)&&s(t))},"shouldRerouteArrow");var It=e((t,e,r=0)=>{const o=t+Math.abs(t-e)/2;if(r>5){return o}const i=dt.every(t=>Math.abs(t-o)>=10);if(i){dt.push(o);return o}const a=Math.abs(t-e);return It(t,e-a/5,r+1)},"findLane");var Ft=e((t,e,r,o)=>{var i,a,n,c,s;const m=_t.get(e.id);const _=_t.get(r.id);if(m===void 0||_===void 0){throw new Error(`Commit positions not found for commits ${e.id} and ${r.id}`)}const l=wt(e,r,m,_,o);let h="";let d="";let p=0;let g=0;let u=(i=mt.get(r.branch))===null||i===void 0?void 0:i.index;r.type===$.MERGE&&e.id!==r.parents[0]&&(u=(a=mt.get(e.branch))===null||a===void 0?void 0:a.index);let b;if(l){h="A 10 10, 0, 0, 0,";d="A 10 10, 0, 0, 1,";p=10;g=10;let t=m.y<_.y?It(m.y,_.y):It(_.y,m.y),r=m.x<_.x?It(m.x,_.x):It(_.x,m.x);if(gt==="TB"){if(m.x<_.x){b=`M ${m.x} ${m.y} L ${r-p} ${m.y} ${d} ${r} ${m.y+g} L ${r} ${_.y-p} ${h} ${r+g} ${_.y} L ${_.x} ${_.y}`}else{u=(n=mt.get(e.branch))===null||n===void 0?void 0:n.index;b=`M ${m.x} ${m.y} L ${r+p} ${m.y} ${h} ${r} ${m.y+g} L ${r} ${_.y-p} ${d} ${r-g} ${_.y} L ${_.x} ${_.y}`}}else if(gt==="BT"){if(m.x<_.x){b=`M ${m.x} ${m.y} L ${r-p} ${m.y} ${h} ${r} ${m.y-g} L ${r} ${_.y+p} ${d} ${r+g} ${_.y} L ${_.x} ${_.y}`}else{u=(c=mt.get(e.branch))===null||c===void 0?void 0:c.index;b=`M ${m.x} ${m.y} L ${r+p} ${m.y} ${d} ${r} ${m.y-g} L ${r} ${_.y+p} ${h} ${r-g} ${_.y} L ${_.x} ${_.y}`}}else{if(m.y<_.y){b=`M ${m.x} ${m.y} L ${m.x} ${t-p} ${h} ${m.x+g} ${t} L ${_.x-p} ${t} ${d} ${_.x} ${t+g} L ${_.x} ${_.y}`}else{u=(s=mt.get(e.branch))===null||s===void 0?void 0:s.index;b=`M ${m.x} ${m.y} L ${m.x} ${t+p} ${d} ${m.x+g} ${t} L ${_.x-p} ${t} ${h} ${_.x} ${t-g} L ${_.x} ${_.y}`}}}else{h="A 20 20, 0, 0, 0,";d="A 20 20, 0, 0, 1,";p=20;g=20;if(gt==="TB"){if(m.x<_.x){if(r.type===$.MERGE&&e.id!==r.parents[0]){b=`M ${m.x} ${m.y} L ${m.x} ${_.y-p} ${h} ${m.x+g} ${_.y} L ${_.x} ${_.y}`}else{b=`M ${m.x} ${m.y} L ${_.x-p} ${m.y} ${d} ${_.x} ${m.y+g} L ${_.x} ${_.y}`}}if(m.x>_.x){h="A 20 20, 0, 0, 0,";d="A 20 20, 0, 0, 1,";p=20;g=20;if(r.type===$.MERGE&&e.id!==r.parents[0]){b=`M ${m.x} ${m.y} L ${m.x} ${_.y-p} ${d} ${m.x-g} ${_.y} L ${_.x} ${_.y}`}else{b=`M ${m.x} ${m.y} L ${_.x+p} ${m.y} ${h} ${_.x} ${m.y+g} L ${_.x} ${_.y}`}}m.x===_.x&&(b=`M ${m.x} ${m.y} L ${_.x} ${_.y}`)}else if(gt==="BT"){if(m.x<_.x){if(r.type===$.MERGE&&e.id!==r.parents[0]){b=`M ${m.x} ${m.y} L ${m.x} ${_.y+p} ${d} ${m.x+g} ${_.y} L ${_.x} ${_.y}`}else{b=`M ${m.x} ${m.y} L ${_.x-p} ${m.y} ${h} ${_.x} ${m.y-g} L ${_.x} ${_.y}`}}if(m.x>_.x){h="A 20 20, 0, 0, 0,";d="A 20 20, 0, 0, 1,";p=20;g=20;if(r.type===$.MERGE&&e.id!==r.parents[0]){b=`M ${m.x} ${m.y} L ${m.x} ${_.y+p} ${h} ${m.x-g} ${_.y} L ${_.x} ${_.y}`}else{b=`M ${m.x} ${m.y} L ${_.x-p} ${m.y} ${h} ${_.x} ${m.y-g} L ${_.x} ${_.y}`}}m.x===_.x&&(b=`M ${m.x} ${m.y} L ${_.x} ${_.y}`)}else{if(m.y<_.y){if(r.type===$.MERGE&&e.id!==r.parents[0]){b=`M ${m.x} ${m.y} L ${_.x-p} ${m.y} ${d} ${_.x} ${m.y+g} L ${_.x} ${_.y}`}else{b=`M ${m.x} ${m.y} L ${m.x} ${_.y-p} ${h} ${m.x+g} ${_.y} L ${_.x} ${_.y}`}}if(m.y>_.y){if(r.type===$.MERGE&&e.id!==r.parents[0]){b=`M ${m.x} ${m.y} L ${_.x-p} ${m.y} ${h} ${_.x} ${m.y-g} L ${_.x} ${_.y}`}else{b=`M ${m.x} ${m.y} L ${m.x} ${_.y+p} ${d} ${m.x+g} ${_.y} L ${_.x} ${_.y}`}}m.y===_.y&&(b=`M ${m.x} ${m.y} L ${_.x} ${_.y}`)}}if(b===void 0){throw new Error("Line definition not found")}t.append("path").attr("d",b).attr("class","arrow arrow"+u%st)},"drawArrow");var Rt=e((t,e)=>{const r=t.append("g").attr("class","commit-arrows");[...e.keys()].forEach(t=>{const o=e.get(t);o.parents&&o.parents.length>0&&o.parents.forEach(t=>{Ft(r,e.get(t),o,e)})})},"drawArrows");var Lt=e((t,e)=>{const r=t.append("g");e.forEach((t,e)=>{var o;const i=e%st;const a=(o=mt.get(t.name))===null||o===void 0?void 0:o.pos;if(a===void 0){throw new Error(`Position not found for branch ${t.name}`)}const n=r.append("line");n.attr("x1",0);n.attr("y1",a);n.attr("x2",pt);n.attr("y2",a);n.attr("class","branch branch"+i);if(gt==="TB"){n.attr("y1",lt);n.attr("x1",a);n.attr("y2",pt);n.attr("x2",a)}else if(gt==="BT"){n.attr("y1",pt);n.attr("x1",a);n.attr("y2",lt);n.attr("x2",a)}dt.push(a);const c=t.name;const s=bt(c);const m=r.insert("rect");const _=r.insert("g").attr("class","branchLabel");const l=_.insert("g").attr("class","label branch-label"+i);l.node().appendChild(s);const h=s.getBBox();m.attr("class","branchLabelBkg label"+i).attr("rx",4).attr("ry",4).attr("x",-h.width-4-((ot===null||ot===void 0?void 0:ot.rotateCommitLabel)===!0?30:0)).attr("y",-h.height/2+8).attr("width",h.width+18).attr("height",h.height+4);l.attr("transform","translate("+(-h.width-14-((ot===null||ot===void 0?void 0:ot.rotateCommitLabel)===!0?30:0))+", "+(a-h.height/2-1)+")");if(gt==="TB"){m.attr("x",a-h.width/2-10).attr("y",0);l.attr("transform","translate("+(a-h.width/2-5)+", 0)")}else if(gt==="BT"){m.attr("x",a-h.width/2-10).attr("y",pt);l.attr("transform","translate("+(a-h.width/2-5)+", "+pt+")")}else{m.attr("transform","translate(-19, "+(a-h.height/2)+")")}})},"drawBranches");var Yt=e(function(t,e,r,o,i){mt.set(t,{pos:e,index:r});e+=50+(i?40:0)+(gt==="TB"||gt==="BT"?o.width/2:0);return e},"setBranchPosition");var Ht=e(function(t,e,r,o){var i,a;ut();c.debug("in gitgraph renderer",t+"\n","id:",e,r);if(!ot){throw new Error("GitGraph config not found")}const n=(i=ot.rotateCommitLabel)!==null&&i!==void 0?i:!1;const s=o.db;ht=s.getCommits();const m=s.getBranchesAsObjArray();gt=s.getDirection();const _=y(`[id="${e}"]`);let l=0;m.forEach((t,e)=>{var r;const o=bt(t.name);const i=_.append("g");const a=i.insert("g").attr("class","branchLabel");const c=a.insert("g").attr("class","label branch-label");(r=c.node())===null||r===void 0?void 0:r.appendChild(o);const s=o.getBBox();l=Yt(t.name,l,e,s,n);c.remove();a.remove();i.remove()});Dt(_,ht,!1);ot.showBranches&&Lt(_,m);Rt(_,ht);Dt(_,ht,!0);B.insertTitle(_,"gitTitleText",(a=ot.titleTopMargin)!==null&&a!==void 0?a:0,s.getDiagramTitle());x(void 0,_,ot.diagramPadding,ot.useMaxWidth)},"draw");var Ot={draw:Ht};var Nt=e(t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map(e=>`\n        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }\n        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }\n        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }\n        .label${e}  { fill: ${t["git"+e]}; }\n        .arrow${e} { stroke: ${t["git"+e]}; }\n        `).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`,"getStyles");var Kt={parser:et,db:Z,renderer:Ot,styles:Nt};var Jt={diagram:Kt};__bbb.z=Jt}).call(this)